/*
	6. 관계 만들기
	6.1 관계란
*/
-- 무엇? 여러 테이블에 분산된 데이터가 어떻게 서로 연결돼 있는지를 나타내는 것
-- 테이블: 서로 관련 있는 데이터를 묶은 것
-- 관계: 여러 테이블에 흩어져 있는 데이터 간 연결고리
-- 관계의 유형 3가지
-- - 일대일(1:1)
-- - 일대다(1:N)
-- - 다대다(N:M)

-- 1. 일대일 관계(1:1, one-to-one)
-- 하나의 데이터가 다른 한 데이터와만 연결된 관계
-- 예: 사용자-개인 설정, 나라-수도, 사람-주민등록증
-- 하나의 테이블로 만들어도 되지만 테이블을 나눴을 때 이점이 있거나, 컬럼이 너무 많아져서 나눌 필요가 있을 때

-- 2. 일대다 관계(1:N, one-to-many)
-- 하나의 데이터가 여러 데이터와 연결된 관계
-- 포함 또는 소유의 관계
-- 예: 사진-댓글, 부서-직원

-- 3. 다대다 관계(N:M, many-to-many)
-- 여러 데이터가 여러 데이터와 연결된 관계('연결 고리' 필요)
-- 예: 
-- 1) 학생-과목
-- 한 학생이 여러 과목 수강 가능
-- 한 과목은 여러 학생을 수용 가능
-- 2) 사용자-사진
-- 한 사용자가 여러 사진에 좋아요 가능
-- 한 사진은 여러 사용자로부터 좋아요 가능

-- 다대다(N:M)는 사실상 직접 표현할 수 없기 때문에, 두 개의 일대다 관계로 분해해서 처리
-- 학생(1)-(N)수강등록(M)-(1)과목
-- 사용자(1)-(N)좋아요(M)-(1)사진
-- 여기서 '수강등록', '좋아요'는 연결 고리(=중간 테이블)가 된다.


-- 테이블 간 관계는 어떻게 만들어질까?
-- 관계를 만드는 키가 존재
-- => 기본키와 외래키의 연결을 통해 만들어짐

-- 기본키(PK, Primary Key)
-- 테이블의 각 행을 고유하게 식별할 수 있는 컬럼
-- 레코드를 구분하는 "컬럼" 또는 "컬럼의 조합"을 말함
-- 예: 주민등록번호
-- 모든 테이블에는 반드시 PK가 존재

-- 다음 4가지 특징을 만족해야 함
-- - 유일성: 유일한 값을 가져야 함(=UNIQUE 제약 조건)
-- - 비 널: NULL이 올 수 없고, 반드시 값을 가져야 함(=NOT NULL 제약 조건)
-- - 불변성: 한 번 정해진 값은 바뀔 수 없음
-- - 식별성: 레코드를 구분하는 명확한 기준 역할을 해야 함

-- 실무에서는 보통 기본키는 id로 명명
-- 예: 고객 테이블은 customer_id, 상품 테이블은 product_id와 같이 테이블명_id 형식으로 이름을 짓는 것이 일반적인 관례
-- 1부터 시작하여 데이터가 추가될 때마다 1씩 자동으로 증가하는 정수값(INTEGER)을 기본키로 사용하는 경우가 가장 흔함


-- 외래키(FK, Foreign Key)
-- 다른 테이블의 기본키를 가리키는 컬럼
-- 두 테이블을 관계로 묶어 연결하는 역할
-- 예: 고객 테이블(PK: customer_id, 참조 당하는 쪽, 부모 테이블) <--(참조)-- 주문 테이블(FK: customer_id, 참조 하는 쪽, 자식 테이블)

-- "참조 무결성"을 강제함(두 테이블의 관계가 항상 유효하고 일관된 상태를 유지해야 한다는 원칙)
-- 쉽게 말하면 참조하는 값이 무조건 있어야 함
-- 예: 고객 테이블에 customer_id(PK)가 1~3까지 저장되어 있는데 
-- 주문 테이블에 customer_id(FK) 값이 99가 입력된다면(고객 테이블에는 99번 고객 아이디가 없음) 
-- 데이터베이스는 데이터의 입력을 막음(오류 발생)


-- 그 외 제약 조건
-- 제약 조건: 컬럼 생성 시 부여하는 특성으로 저장할 수 있는 값에 제한이나 규칙을 설정
-- 이로 인해 잘못되거나 일관성 없는 데이터가 입력되는 것을 원천적으로 차단할 수 있음
-- 데이터의 무결성(정확성, 일관성, 유효성을 유지하려는 성질), 즉 데이터에 결점이 없는 상태를 유지하는 것이 제약 조건의 핵심 목표

-- - AUTO_INCREMENT: 컬럼의 값을 1씩 자동 증가하여 저장(정수형에 붙일 수 있으며 기본키와 함께 사용됨)
-- - UNIQUE: 컬럼에 값이 고유하도록 강제(중복 값을 입력하면 에러), 예: 이미 사용 중인 이메일입니다.
-- - NOT NULL: 필수 값, 컬럼에 반드시 값이 입력되어야 함(값을 입력하지 않으면, 즉 NULL 값이 들어가면 에러)
-- - DEFAULT: 컬럼에 입력값이 없을 시, 기본값을 부여, 예: 처음 회원 가입 시 사용자의 포인트 = 0
-- - CHECK: 컬럼에 들어갈 수 있는 값의 범위나 조건을 직접 지정, 반드시 만족하도록 강제(조건을 만족하지 않는 값 입력 시 에러), 예: 반드시 짝수
-- - UNSIGNED: 숫자형 컬럼에 음수 허용을 금지(양수값만 저장하도록 제한)

-- 제약 조건의 사용 예
CREATE TABLE users (
	id INT AUTO_INCREMENT,               -- 아이디(자동으로 1씩 증가)
    email VARCHAR(100) UNIQUE,           -- 이메일(고유한 값만 허용)
    name VARCHAR(50) NOT NULL,           -- 사용자명(NULL을 허용하지 않음)
    status VARCHAR(10) DEFAULT 'active', -- 계좌 상태(기본값은 'active')
    balance INT UNSIGNED,                -- 계좌 잔액(음수를 허용하지 않음)
    age INT CHECK (age >= 18),           -- 나이(18세 이상만 허용)
    PRIMARY KEY (id)                     -- 기본키 지정: id
);

-- 제약 조건 위반 시 테스트
-- 사용자명(NOT NULL)에 NULL 값을 입력 시도
INSERT INTO users (email, name)
VALUES ('geoblo@naver.com', NULL);
-- Error Code: 1048. Column 'name' cannot be null

-- 이메일(UNIQUE)에 중복 값을 입력 시도
INSERT INTO users (email, name)
VALUES ('geoblo@naver.com', '김');

INSERT INTO users (email, name)
VALUES ('geoblo@naver.com', '재');
-- Error Code: 1062. Duplicate entry 'geoblo@naver.com' for key 'users.email'

-- 기본키(PK)에 중복 값을 입력 시도
INSERT INTO users (id, email, name)
VALUES (1, 'hyun@naver.com', '현');
-- Error Code: 1062. Duplicate entry '1' for key 'users.PRIMARY'

-- 나이(age >= 18)에 18세 미만 값을 입력 시도
INSERT INTO users (email, name, age)
VALUES ('hyun@naver.com', '현', 15);
-- Error Code: 3819. Check constraint 'users_chk_1' is violated.











-- Quiz: 제약 조건 걸기
CREATE TABLE products (
  id INTEGER,           -- 상품 ID(자동 증가)
  name VARCHAR(100),    -- 상품명(고유한 값만 허용)
  category VARCHAR(50), -- 상품 카테고리(NULL 불가)
  status VARCHAR(20),   -- 상품 상태(기본값: available)
  dc_rate INTEGER,      -- 할인율(0~50% 제한)
  stock INTEGER,        -- 재고 수량(음수 불가)
                        -- 기본키 설정: id
);




-- Quiz
-- 1. 다음 빈칸에 들어갈 용어를 순서대로 고르세요. (예: ㄱㄴㄷㄹㅁ)
-- ① __________: 여러 테이블에 분산 저장된 데이터가 서로 어떻게 연결돼 있는지를 정의한 개념
-- ② __________: 테이블 내 모든 튜플을 유일하게 구분하는 칼럼 또는 칼럼의 조합
-- ③ __________: 한 번 설정된 값은 변경될 수 없다는 성질
-- ④ __________: 데이터가 존재하지 않는 상태
-- ⑤ __________: 다른 테이블의 기본키를 가리키는 칼럼으로 두 테이블 간 관계를 만드는 칼럼

-- (ㄱ) 불변성
-- (ㄴ) 관계
-- (ㄷ) 외래키(FK)
-- (ㄹ) NULL
-- (ㅁ) 기본키(PK)

-- 정답: 


/*
	6.2 다양한 관계 만들기
*/
-- 외래키와 기본키를 연결하여 일대일/일대다/다대다 관계를 만들어 보자

-- 외래키 제약 조건의 문법




-- 1. 일대일 관계 만들기
-- A 테이블의 한 데이터가 B 테이블의 한 데이터와만 연결된 관계
-- 서로 긴밀한 연관성이 있거나, 하나의 테이블에서 분화된 경우의 관계
-- 일대일 관계에서 외래키의 위치는 양쪽 테이블 중 어느 곳에 두어도 되지만 사용 빈도가 더 적은 쪽에 두는 것이 일반적임

-- relation DB 생성 및 진입
CREATE DATABASE relation;
USE relation;




-- 2. 일대다 관계 만들기
-- A 테이블의 한 데이터가 B 테이블의 여러 데이터와 연결되는 관계
-- 하나의 데이터에 여러 데이터가 포함되거나 소유되는 경우
-- 일대다 관계에서는 '다' 쪽 테이블에 외래키 지정

